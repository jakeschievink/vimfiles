let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> <silent> \p <Plug>ClojureCloseResultBuffer.
nmap <buffer> <silent> \sR <Plug>ClojureStartLocalRepl.
nmap <buffer> <silent> \sr <Plug>ClojureStartRepl.
nmap <buffer> <silent> \ep <Plug>ClojureEvalParagraph.
nmap <buffer> <silent> \et <Plug>ClojureEvalToplevel.
vmap <buffer> <silent> \eb <Plug>ClojureEvalBlock.
nmap <buffer> <silent> \el <Plug>ClojureEvalLine.
nmap <buffer> <silent> \ef <Plug>ClojureEvalFile.
nmap <buffer> <silent> \m1 <Plug>ClojureMacroExpand1.
nmap <buffer> <silent> \me <Plug>ClojureMacroExpand.
nmap <buffer> <silent> \rt <Plug>ClojureRunTests.
nmap <buffer> <silent> \rF <Plug>ClojureRequireFileAll.
nmap <buffer> <silent> \rf <Plug>ClojureRequireFile.
nmap <buffer> <silent> \gi <Plug>ClojureGotoSourceInteractive.
nmap <buffer> <silent> \gw <Plug>ClojureGotoSourceWord.
nmap <buffer> <silent> \si <Plug>ClojureSourceLookupInteractive.
nmap <buffer> <silent> \sw <Plug>ClojureSourceLookupWord.
nmap <buffer> <silent> \mi <Plug>ClojureMetaLookupInteractive.
nmap <buffer> <silent> \mw <Plug>ClojureMetaLookupWord.
nmap <buffer> <silent> \fd <Plug>ClojureFindDoc.
nmap <buffer> <silent> \ji <Plug>ClojureJavadocLookupInteractive.
nmap <buffer> <silent> \jw <Plug>ClojureJavadocLookupWord.
nmap <buffer> <silent> \li <Plug>ClojureDocLookupInteractive.
nmap <buffer> <silent> \lw <Plug>ClojureDocLookupWord.
nmap <buffer> <silent> \tr <Plug>ClojureToggleParenRainbow.
nmap <buffer> <silent> \aw <Plug>ClojureAddToLispWords.
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:;\ -,mO:;\ \ ,n:;
setlocal commentstring=;%s
setlocal complete=.,w,b,u,t,i,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.core.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.inspector.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.java.browse.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.java.io.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.java.javadoc.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.java.shell.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.main.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.pprint.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.repl.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.set.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.stacktrace.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.string.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.template.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.test.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.test.tap.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.test.junit.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.walk.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.xml.txt,k/home/yggdrasil/.vim/ftplugin/clojure/completions-clojure.zip.txt
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=^\\s*(def\\(-|n|n-|macro|struct|multi\\)?
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'clojure'
setlocal filetype=clojure
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetClojureIndent()
setlocal indentkeys=!,o,O
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,?,-,*,!,+,/,=,<,>,.,:
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal nomodeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=2
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'clojure'
setlocal syntax=clojure
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 100 - ((29 * winheight(0) + 16) / 33)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
100
normal! 0
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
